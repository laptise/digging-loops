import { User } from "@entities";
import { faBars, faMagnifyingGlass, faStar } from "@fortawesome/pro-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  Avatar,
  Button,
  ButtonGroup,
  Dialog,
  DialogTitle,
  FormControl,
  FormControlLabel,
  FormLabel,
  InputLabel,
  ModalProps,
  Radio,
  RadioGroup,
  Rating,
  Select,
  SelectChangeEvent,
  Slider,
  Stack,
  TextField,
  Typography,
} from "@mui/material";
import AppBar from "@mui/material/AppBar";
import Box from "@mui/material/Box";
import IconButton from "@mui/material/IconButton";
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import Toolbar from "@mui/material/Toolbar";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { FC, ReactNode, useState } from "react";
import styles from "../styles/Common.module.scss";
type LayoutProps = {
  children: ReactNode;
  pageTitle: string;
  mainId: string;
  auth?: User | null;
};

export const Layout: FC<LayoutProps> = ({ children, pageTitle, mainId, auth }) => {
  return (
    <>
      <AppBarr auth={auth} />
      <div className={styles.container}>
        <Head>
          <title>{`${pageTitle} | Digging Loops`}</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main id={mainId} className={styles.main}>
          {children}
        </main>
        <Footer />
      </div>
    </>
  );
};
export interface SimpleDialogProps {
  open: boolean;
  close(): void;
}

function BasicSelect() {
  const [age, setAge] = useState("");

  const handleChange = (event: SelectChangeEvent) => {
    setAge(event.target.value as string);
  };

  return (
    <Box sx={{ minWidth: 120 }}>
      <FormControl fullWidth>
        <Select id="demo-simple-select" value={age} onChange={handleChange} size="small">
          <MenuItem value={10}>4/4</MenuItem>
          <MenuItem value={20}>3/4</MenuItem>
          <MenuItem value={30}>2/4</MenuItem>
        </Select>
      </FormControl>
    </Box>
  );
}

function valuetext(value: number) {
  return `${value}°C`;
}

function RangeSlider() {
  const [value, setValue] = useState<number[]>([80, 120]);

  const handleChange = (event: Event, newValue: number | number[]) => {
    setValue(newValue as number[]);
  };

  return (
    <Box sx={{ width: 200 }}>
      <Slider
        min={40}
        max={200}
        getAriaLabel={() => "Temperature range"}
        value={value}
        onChange={handleChange}
        valueLabelDisplay="auto"
        getAriaValueText={valuetext}
      />
    </Box>
  );
}

const labels: { [index: string]: string } = {
  0.5: "0.5점이상",
  1: "1점이상",
  1.5: "1.5점이상",
  2: "2점이상",
  2.5: "2.5점이상",
  3: "3점이상",
  3.5: "3.5점이상",
  4: "4점이상",
  4.5: "4.5점이상",
  5: "5점만",
};

function getLabelText(value: number) {
  return `${value} Star${value !== 1 ? "s" : ""}, ${labels[value]}`;
}

function HoverRating() {
  const [value, setValue] = useState<number | null>(2);
  const [hover, setHover] = useState(-1);

  return (
    <Box
      sx={{
        width: 300,
        display: "flex",
        alignItems: "center",
      }}
    >
      <Rating
        name="hover-feedback"
        value={value}
        precision={0.5}
        getLabelText={getLabelText}
        onChange={(event, newValue) => {
          setValue(newValue);
        }}
        onChangeActive={(event, newHover) => {
          setHover(newHover);
        }}
      />
      {value !== null && <Box sx={{ ml: 2 }}>{labels[hover !== -1 ? hover : value]}</Box>}
    </Box>
  );
}
const SimpleDialog: FC<SimpleDialogProps> = ({ open, close }) => {
  const handleClose: ModalProps["onClose"] = (_, reason) => {
    close();
  };

  const handleListItemClick = (value: string) => {};

  return (
    <Dialog onClose={handleClose} open={open}>
      <DialogTitle>검색</DialogTitle>
      <Stack sx={{ p: 2 }} spacing={2}>
        <Stack direction="row" spacing={2}>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">검색대상</FormLabel>
            <ButtonGroup orientation="vertical" variant="outlined" aria-label="outlined button group">
              <Button>샘플</Button>
              <Button variant="contained">루프</Button>
              <Button>음원</Button>
            </ButtonGroup>
          </FormControl>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">분위기</FormLabel>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>상쾌</Button>
              <Button variant="contained">신남</Button>
              <Button>깜찍</Button>
              <Button variant="contained">행복</Button>
            </ButtonGroup>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>공포</Button>
              <Button>역동</Button>
              <Button>장엄</Button>
              <Button>분노</Button>
            </ButtonGroup>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>슬픔</Button>
              <Button>몽환</Button>
              <Button>심플</Button>
              <Button>복잡</Button>
            </ButtonGroup>
          </FormControl>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">악기</FormLabel>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>기타</Button>
              <Button variant="contained">베이스</Button>
              <Button>드럼</Button>
              <Button variant="contained">보컬</Button>
            </ButtonGroup>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>브라스</Button>
              <Button>스트링</Button>
              <Button>플럭</Button>
              <Button>트</Button>
            </ButtonGroup>
            <ButtonGroup variant="outlined" aria-label="outlined button group">
              <Button>Sine</Button>
              <Button>Saw</Button>
              <Button>Sq</Button>
              <Button>LFO</Button>
            </ButtonGroup>
          </FormControl>
        </Stack>
        <Stack direction="row" spacing={2}>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">BPM</FormLabel>
            <RangeSlider />
          </FormControl>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">마디수</FormLabel>
            <RangeSlider />
          </FormControl>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">박자</FormLabel>
            <BasicSelect />
          </FormControl>
        </Stack>
        <Stack direction="row" spacing={2}>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">가격</FormLabel>
            <RangeSlider />
          </FormControl>
          <FormControl>
            <FormLabel id="demo-row-radio-buttons-group-label">별점</FormLabel>
            <HoverRating />
          </FormControl>
        </Stack>
        <Stack direction="row" alignItems={"center"} spacing={2}>
          <Typography>검색어</Typography>
          <TextField placeholder="입력" />
        </Stack>
      </Stack>
    </Dialog>
  );
};

const LoginButton = () => (
  <Link passHref={true} href="/login">
    <Button sx={{ color: "white" }}>LOGIN</Button>
  </Link>
);

const UserButton: FC<{ auth: User }> = ({ auth }) => {
  return <Button>{auth.name}</Button>;
};

const Header: FC<{ auth?: User | null }> = ({ auth }) => {
  return (
    <>
      <header className={styles.header}>
        <Stack direction="row">{auth ? <UserButton auth={auth} /> : <LoginButton />}</Stack>
      </header>
    </>
  );
};

const Footer = () => (
  <footer className={styles.footer}>
    <a
      href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
      target="_blank"
      rel="noopener noreferrer"
    >
      Powered by{" "}
      <span className={styles.logo}>
        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
      </span>
    </a>
  </footer>
);

const AppBarr: FC<{ auth?: User | null }> = ({ auth }) => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [viewSearchBox, setViewSearchBox] = useState(false);
  const searchBoxClose = () => setViewSearchBox(false);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    // setAuth(event.target.checked);
  };

  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const logout = async () => {
    console.log(1199);
  };

  return (
    <>
      <Box sx={{ flexGrow: 1 }} className={styles.header}>
        <AppBar position="static">
          <Toolbar sx={{ display: "flex" }}>
            <IconButton size="large" edge="start" color="inherit" aria-label="menu" sx={{ mr: 2 }}>
              <FontAwesomeIcon icon={faBars} />
            </IconButton>
            <Link passHref={true} href="/">
              Digging Loops
            </Link>
            <Button onClick={() => setViewSearchBox(true)}>
              <FontAwesomeIcon fontSize={20} icon={faMagnifyingGlass} color="white" />
            </Button>
            {auth ? (
              <>
                <IconButton
                  size="large"
                  aria-label="account of current user"
                  aria-controls="menu-appbar"
                  aria-haspopup="true"
                  onClick={handleMenu}
                  sx={{ marginLeft: "auto" }}
                  color="inherit"
                >
                  <Avatar />
                </IconButton>
                <Menu
                  id="menu-appbar"
                  anchorEl={anchorEl}
                  anchorOrigin={{
                    vertical: "top",
                    horizontal: "right",
                  }}
                  keepMounted
                  transformOrigin={{
                    vertical: "top",
                    horizontal: "right",
                  }}
                  open={Boolean(anchorEl)}
                  onClose={handleClose}
                >
                  {auth.name}님<MenuItem onClick={handleClose}>내 프로필</MenuItem>
                  <MenuItem onClick={handleClose}>대시보드</MenuItem>
                  <MenuItem onClick={logout}>로그아웃</MenuItem>
                </Menu>
              </>
            ) : (
              <LoginButton />
            )}
          </Toolbar>
        </AppBar>
      </Box>
      <SimpleDialog open={viewSearchBox} close={searchBoxClose} />
    </>
  );
};
